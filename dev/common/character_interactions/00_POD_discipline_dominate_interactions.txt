# POD Schemes
# Rationalize
# Sparc

POD_mesmerize_interaction = {
	category = interaction_category_vampire
	#common_interaction = yes
	#interface_priority = 88
	scheme = PODmesmerize
	icon = POD_dominate_interaction
	
	ai_frequency = 0

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = { 
			OR = {
				has_perk = mesmerize_perk 
				has_perk = authority_perk
			} 
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = torpor }
			NOT = { has_trait = automaton }
			NOT = { has_trait = wight }
			NOT = { has_trait = barghest }
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }
			POD_is_not_clone_trigger = yes
		}
		POD_cross_umbra_interaction_valid_trigger = yes
		scope:actor = {
			can_start_scheme = {
				type = PODmesmerize
				target = scope:recipient
			}
			NOT = { has_character_modifier = bloodhunger5_modifier }
		}
		POD_mesmerize_valid_trigger = yes
		# custom_description = {
        #     object = scope:recipient
        #     text = "strong_mental_defenses_trigger"
        #     strong_mental_defenses_interaction_trigger = yes
        # }
	}

	desc = {
		triggered_desc = {
			trigger = {
				scope:actor = {
					#NOT = { is_at_war_with = scope:recipient }
					can_start_scheme = {
						type = PODmesmerize
						target = scope:recipient
					}

				}
			}
			desc = scheme_interaction_tt_POD_mesmerize_approved
		}

	}

	on_accept = {
	
		hidden_effect = {
			scope:actor = {
				start_scheme = {
					type = PODmesmerize
					target = scope:recipient
				}
			}
		}
	}
	
	auto_accept = yes
	
	ai_will_do = {
		base = 0
	}
}

POD_change_personality_interaction = {
	category = interaction_category_vampire
	#common_interaction = yes
	#interface_priority = 83
	desc = POD_change_personality_interaction_desc
	icon = POD_dominate_interaction

	ai_frequency = 0
	
	cost = { piety = major_piety_value }

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = { has_perk = deep_memories_perk }
	}

	is_valid = {
		OR = {
			AND = {
				#Ghouls and herd require the deep memories perk
				scope:actor = { has_perk = deep_memories_perk }
				OR = {
					scope:recipient = { has_relation_herd_owner = scope:actor }
					scope:recipient = { has_relation_ghoul_domitor = scope:actor }
				}
			}
			
			AND = {
				#To rewrite the memories of non-ghouls/herd you need the fancier elder perk
				scope:actor = { has_perk = rewrite_personality_perk }
				#Beyond having the required perk it should also require the target to be dominated first
				custom_description = {
					text = mesmerized_or_conditioned
					scope:actor = {
						OR = {
							AND = {
								has_variable_list = dominated_targets
								is_target_in_variable_list = {
									name = dominated_targets
									target = scope:recipient
								}
							}
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
			}
		}

	}

	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = torpor }
			NOT = { has_trait = automaton }
			NOT = { has_trait = wight }
			NOT = { has_trait = barghest }
			POD_is_not_clone_trigger = yes
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }
		}
		POD_cross_umbra_interaction_valid_trigger = yes
		scope:actor = { NOT = { has_character_modifier = bloodhunger5_modifier } }
        scope:actor = {	NOT = { is_at_war_with = scope:recipient } }
        #scope:recipient = { NOT = { has_character_flag = conditioned_commanded } }
    }
	
	#cooldown = { years = 1 } 

	on_accept = {
		scope:actor = {
			custom_tooltip = POD_change_personality_interaction_accept
		}
		scope:actor = { add_stress = major_stress_gain }

		#This costs piety for conscience faiths
		if = {
			limit = {
				OR = {
					scope:actor = { faith = { has_doctrine = doctrine_enlightenment_virtues_conscience_and_selfcontrol } }
					scope:actor = { faith = { has_doctrine = doctrine_enlightenment_virtues_conscience_and_instinct } }		
				}
			}
			scope:actor = { add_piety = major_piety_loss }
		}


		#adds cooldown flag to conditioned targets and removes the mesmerize command thingy otherwise
		if = {
			limit ={
				OR = {
					scope:recipient = { NOT = { has_relation_herd_owner = scope:actor } }
					scope:recipient = { NOT = { has_relation_ghoul_domitor = scope:actor } }
				}
				
			}
			scope:actor = {
				if = {
					limit = {
						has_variable_list = conditioned_targets
						is_target_in_variable_list = {
							name = conditioned_targets
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_character_flag = { flag = conditioned_commanded years = 1}
					}
					custom_tooltip = POD_dominate_interaction_condition_cooldown_ct
				}
				if = {
					limit = {
						has_variable_list = dominated_targets
						is_target_in_variable_list = {
							name = dominated_targets
							target = scope:recipient
						}
					}
					use_hook = scope:recipient
					remove_list_variable = {
						name = dominated_targets
						target = scope:recipient
					}
				}
			}
		}
		
		
		
		scope:actor = { POD_hunger_rouse_check_effect = yes }


		hidden_effect = {
			scope:actor = {
				trigger_event = POD_change_personality.100
			}
		}
	}
	
	auto_accept = yes
	
	ai_will_do = {
		base = 0
	}
}

POD_change_sexuality_interaction = {
	category = interaction_category_vampire
	desc = POD_change_sexuality_interaction_desc
	icon = POD_dominate_interaction

	ai_frequency = 0

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = { has_perk = deep_memories_perk }
	}

	is_valid = {
		OR = {
			AND = {
				#Ghouls and herd require the deep memories perk
				scope:actor = { has_perk = deep_memories_perk }
				OR = {
					scope:recipient = { has_relation_herd_owner = scope:actor }
					scope:recipient = { has_relation_ghoul_domitor = scope:actor }
				}
			}
			
			AND = {
				#To rewrite the memories of non-ghouls/herd you need the fancier elder perk
				scope:actor = { has_perk = rewrite_personality_perk }
				#Beyond having the required perk it should also require the target to be dominated first
				custom_description = {
					text = mesmerized_or_conditioned
					scope:actor = {
						OR = {
							AND = {
								has_variable_list = dominated_targets
								is_target_in_variable_list = {
									name = dominated_targets
									target = scope:recipient
								}
							}
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
			}
		}

	}

	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = torpor }
			NOT = { has_trait = automaton }
			POD_is_not_clone_trigger = yes
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }
		}
		POD_cross_umbra_interaction_valid_trigger = yes
		scope:actor = { NOT = { has_character_modifier = bloodhunger5_modifier } }
        scope:actor = {	NOT = { is_at_war_with = scope:recipient } }
    }
	
	send_option = {
		is_shown = {
			scope:recipient = { NOT = { has_sexuality = heterosexual } }
		}
		flag = heterosexual
		localization = sexuality_he
	}
	
	send_option = {
		is_shown = {
			scope:recipient = { NOT = { has_sexuality = homosexual } }
		}
		flag = homosexual
		localization = sexuality_ho
	}
	
	send_option = {
		is_shown = {
			scope:recipient = { NOT = { has_sexuality = bisexual } }
		}
		flag = bisexual
		localization = sexuality_bi
	}
	
	send_option = {
		is_shown = {
			scope:recipient = { NOT = { has_sexuality = asexual } }
		}
		flag = asexual
		localization = sexuality_as
	}

	on_accept = {
		scope:actor = {
			POD_willpower_rouse_check_effect = yes
			POD_hunger_rouse_check_effect = yes
		}
		#This costs piety for conscience faiths
		if = {
			limit = {
				OR = {
					scope:actor = { faith = { has_doctrine = doctrine_enlightenment_virtues_conscience_and_selfcontrol } }
					scope:actor = { faith = { has_doctrine = doctrine_enlightenment_virtues_conscience_and_instinct } }		
				}
			}
			scope:actor = { add_piety = minor_piety_loss }
		}

		#adds cooldown flag to conditioned targets and removes the mesmerize command thingy otherwise
		if = {
			limit ={
				OR = {
					scope:recipient = { NOT = { has_relation_herd_owner = scope:actor } }
					scope:recipient = { NOT = { has_relation_ghoul_domitor = scope:actor } }
				}
				
			}
			scope:actor = {
				if = {
					limit = {
						has_variable_list = conditioned_targets
						is_target_in_variable_list = {
							name = conditioned_targets
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_character_flag = { flag = conditioned_commanded years = 1}
					}
					custom_tooltip = POD_dominate_interaction_condition_cooldown_ct
				}
				if = {
					limit = {
						has_variable_list = dominated_targets
						is_target_in_variable_list = {
							name = dominated_targets
							target = scope:recipient
						}
					}
					use_hook = scope:recipient
					remove_list_variable = {
						name = dominated_targets
						target = scope:recipient
					}
				}
			}
		}
		switch = {
			trigger = yes
			scope:heterosexual = {
				scope:recipient = { set_sexuality = heterosexual }
			}
			scope:homosexual = {
				scope:recipient = { set_sexuality = homosexual }
			}
			scope:bisexual = {
				scope:recipient = { set_sexuality = bisexual }
			}
			scope:asexual = {
				scope:recipient = { set_sexuality = asexual }
			}
		}
	}
	
	auto_accept = yes
	
	ai_will_do = {
		base = 0
	}
}

POD_dominate_interaction = {
	category = interaction_category_vampire
	desc = POD_dominate_interaction_desc
	icon = POD_dominate_interaction
	
	is_shown = {
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = {
			has_perk = mesmerize_perk
			OR = {
				has_hook_of_type = {
					target = scope:recipient
					type = weak_dominate_hook
				}
				has_hook_of_type = {
					target = scope:recipient
					type = conditioning_hook
				}
				has_hook_of_type = {
					target = scope:recipient
					type = rationalize_hook
				}
				AND = {
					has_variable_list = dominated_targets
					is_target_in_variable_list = {
						name = dominated_targets
						target = scope:recipient
					}
				}
				AND = {
					has_variable_list = conditioned_targets
					is_target_in_variable_list = {
						name = conditioned_targets
						target = scope:recipient
					}
				}
			}
		
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = automaton }
			NOT = { has_trait = torpor }
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }	
			POD_is_not_clone_trigger = yes
		}
		POD_cross_umbra_interaction_valid_trigger = yes
		scope:actor = {
			trigger_if = {
				limit = {
					AND = {
						has_variable_list = conditioned_targets
						is_target_in_variable_list = {
							name = conditioned_targets
							target = scope:recipient
						}
					}
				}
				custom_description = {
					text = POD_power_cooldown
					NOT = { scope:recipient = { has_character_flag = conditioned_commanded  } } 
				}
			}
		}
		
	}

	populate_recipient_list = {
		scope:actor = {
			every_in_list = {
				variable = secondary_target
				limit = { is_alive = yes }
				add_to_list = characters
			}
			add_to_list = characters
		}
		scope:recipient = { add_to_list = characters }
	}
	
	send_option = {	
		is_shown = { 
			scope:recipient = {
				is_landed = yes
			}
		}
		is_valid = { scope:recipient = { monthly_character_income > 0  } } 								
		flag = gold_option							
		localization = POD_dominate_interaction_gold_option																			
	}
	
	send_option = {									
		flag = embarass_option							
		localization = POD_dominate_interaction_embarass_option																			
	}
	
	send_option = {	
		is_valid = { 
			scope:recipient = {
				any_known_secret = {
					NOT = { is_known_by = scope:actor }
				}
			} 
		} 								
		flag = reveal_secret_option							
		localization = POD_dominate_interaction_reveal_secret_option																		
	}
	
	send_option = {	
		is_shown = { 
			scope:recipient = {
				is_landed = no
				NOT = { is_courtier_of = scope:actor }
			}
		}							
		flag = recruit_option							
		localization = POD_dominate_interaction_recruit_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:recipient = {
				is_landed = yes
				POD_splat_has_masquerade_trigger = yes
			}
		}
		is_valid = { 
			scope:recipient = {
				NOT = { has_character_modifier = masquerade5_modifier}
			} 
		} 								
		flag = masq_option							
		localization = POD_dominate_interaction_masq_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:actor = {
				has_perk = terminal_decree_perk
			}
		}						
		flag = suicide_option							
		localization = POD_dominate_interaction_suicide_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:actor = {
				OR = {
					has_perk = conditioning_perk
					has_trait = dominateadvanced
				}
			}
		}							
		flag = condition_option							
		localization = POD_dominate_interaction_condition_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:recipient = {
				any_scheme = {
					scheme_target = scope:secondary_recipient
				}
			}
		}								
		flag = stop_scheme_option							
		localization = POD_dominate_interaction_stop_scheme_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:actor = {
				has_perk = concord_of_submission_perk
			}
			scope:actor = {
				any_character_war = {
					primary_attacker = scope:recipient
				}
			}
		}
		is_valid = { 
			scope:actor = {
				custom_description = {
					text = POD_power_cooldown
					NOT = {
						has_character_flag = dominate_stop_war_cooldown
					}
				}
			}
		} 								
		flag = stop_war_option							
		localization = POD_dominate_interaction_stop_war_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:secondary_recipient ?= { is_imprisoned_by = scope:recipient }
		}							
		flag = release_prisoner_option							
		localization = POD_dominate_interaction_release_prisoner_option																		
	}
	
	send_option = {	
		is_shown = { 
			scope:recipient = {
				can_start_scheme = {
					target = scope:secondary_recipient
					type = abduct 
				}	
			}
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
		} 								
		flag = abduct_option						
		localization = POD_dominate_interaction_abduct_option																		
	}
	
	send_option = {	
		is_shown = {
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
			scope:recipient = {
				can_start_scheme = {
					target = scope:secondary_recipient
					type = murder 
				}	
			}
		}							
		flag = murder_option						
		localization = POD_dominate_interaction_murder_option																		
	}

	#use a hunter to start an inquisition hunt against a third party
	send_option = {
		is_shown = {
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
			exists = scope:secondary_recipient
		}
		is_valid = {
			scope:recipient = {
				can_start_scheme = { type = inquihunt target = scope:secondary_recipient }
			}
		}
		flag = inquihunt_option
		localization = POD_dominate_interaction_inquihunt_option
	}

    send_option = {
        flag = have_crazy_sex_with_me_option
        localization = POD_dominate_interaction_have_crazy_sex_with_me_option
    }
	
	on_accept = {
		
		scope:actor = {
			if = {
				limit = {
					has_variable_list = conditioned_targets
					is_target_in_variable_list = {
						name = conditioned_targets
						target = scope:recipient
					}
				}
				scope:recipient = {
					add_character_flag = { flag = conditioned_commanded years = 1}
				}
				custom_tooltip = POD_dominate_interaction_condition_cooldown_ct
			}
			else = {
				use_hook = scope:recipient
				remove_list_variable = {
					name = dominated_targets
					target = scope:recipient
				}
			}
		}
		
		if = {		
			limit = { scope:gold_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					if = {
						limit = { scope:actor = { has_perk = rationalize_perk } }
						scope:recipient = { 
							pay_long_term_income = {
								target = scope:actor
								months = 9
							}
						}
					}
					else = {
						scope:recipient = { 
							pay_long_term_income = {
								target = scope:actor
								months = 3
							}
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							if = {
								limit = { scope:actor = { has_perk = rationalize_perk } }
								scope:recipient = { 
									pay_long_term_income = {
										target = scope:actor
										months = 9
									}
								}
							}
							else = {
								scope:recipient = { 
									pay_long_term_income = {
										target = scope:actor
										months = 3
									}
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						
						modifier = {
							factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							if = {
								limit = { scope:actor = { has_perk = rationalize_perk } }
								scope:recipient = { 
									pay_long_term_income = {
										target = scope:actor
										months = 9
									}
								}
							}
							else = {
								scope:recipient = { 
									pay_long_term_income = {
										target = scope:actor
										months = 3
									}
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									if = {
										limit = { scope:actor = { has_perk = rationalize_perk } }
										scope:recipient = { 
											pay_long_term_income = {
												target = scope:actor
												months = 9
											}
										}
									}
									else = {
										scope:recipient = { 
											pay_long_term_income = {
												target = scope:actor
												months = 3
											}
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_greed divide = 10 }
							always = yes
						}
						modifier = {
							factor = 2
							scope:recipient = { has_trait = greedy }
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:embarass_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						add_prestige = -100
						random = {
							chance = 10
							increase_wounds_no_death_effect = { REASON = fight }
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								add_prestige = -100
								random = {
									chance = 10
									increase_wounds_no_death_effect = { REASON = fight }
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								add_prestige = -100
								random = {
									chance = 10
									increase_wounds_no_death_effect = { REASON = fight }
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										add_prestige = -100
										random = {
											chance = 10
											increase_wounds_no_death_effect = { REASON = fight }
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 2
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							factor = 2
							scope:recipient = {
								has_trait = arrogant
							}
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:reveal_secret_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						random_known_secret = {
							limit = { NOT = { is_known_by = scope:actor }}
							reveal_to = scope:actor
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							hidden_effect = {
								scope:recipient = {
									random_known_secret = {
										limit = { NOT = { is_known_by = scope:actor }}
										reveal_to = scope:actor
									}
								}
							}
							custom_tooltip = POD_dominate_interaction_reveal_secret_option_ct
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								random_known_secret = {
									limit = { NOT = { is_known_by = scope:actor }}
									reveal_to = scope:actor
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									hidden_effect = {
										scope:recipient = {
											random_known_secret = {
												limit = { NOT = { is_known_by = scope:actor }}
												reveal_to = scope:actor
											}
										}
									}
									custom_tooltip = POD_dominate_interaction_reveal_secret_option_ct
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 5
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							factor = 2
							scope:recipient = { has_trait = deceitful}
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:recruit_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						add_courtier = scope:recipient
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:actor = {
								add_courtier = scope:recipient
							}
						}
					}
					scope:recipient = {
						add_character_flag = {
							flag = blocked_from_leaving
							years = 5
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								add_courtier = scope:recipient
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:actor = {
										add_courtier = scope:recipient
									}
								}
							}
							scope:recipient = {
								add_character_flag = {
									flag = blocked_from_leaving
									years = 5
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:masq_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						POD_masquerade_exposure_increase_effect = yes
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								POD_masquerade_exposure_increase_effect = yes
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								POD_masquerade_exposure_increase_effect = yes
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										POD_masquerade_exposure_increase_effect = yes
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:recipient.faith = { has_doctrine = doctrine_vampirethemasquerade_strict  }
						}
						modifier = {
							factor = 0
							scope:recipient.faith = { has_doctrine = doctrine_vampirethemasquerade_none  }
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:suicide_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						random_list = {
							2 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
							3 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
							5 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								hidden_effect = {
									random_list = {
										2 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
										3 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
										5 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
									}
								}
								custom_tooltip = POD_dominate_interaction_suicide_option_ct
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
							
								random_list = {
									2 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
									3 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
									5 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										hidden_effect = {
											random_list = {
												2 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
												3 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
												5 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
											}
										}
										custom_tooltip = POD_dominate_interaction_suicide_option_ct
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 20
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:release_prisoner_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						scope:secondary_recipient = {
							release_from_prison = yes
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:actor = {
								scope:secondary_recipient = {
									release_from_prison = yes
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								scope:secondary_recipient = {
									release_from_prison = yes
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:actor = {
										scope:secondary_recipient = {
											release_from_prison = yes
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = 10
							scope:recipient = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
		}
		
		else_if = {
			limit = { scope:stop_scheme_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						every_scheme = {
							limit = {
								scheme_target = scope:secondary_recipient
							}
							end_scheme = yes
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								every_scheme = {
									limit = {
										scheme_target = scope:secondary_recipient
									}
									end_scheme = yes
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								every_scheme = {
									limit = {
										scheme_target = scope:secondary_recipient
									}
									end_scheme = yes
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										every_scheme = {
											limit = {
												scheme_target = scope:secondary_recipient
											}
											end_scheme = yes
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:recipient = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = { value = scope:recipient.ai_honor divide = -10}
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_vengefulness divide = 10}
							always = yes
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:abduct_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						start_scheme = {
							type = abduct
							target = scope:secondary_recipient
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								start_scheme = {
									type = abduct
									target = scope:secondary_recipient
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								start_scheme = {
									type = abduct
									target = scope:secondary_recipient
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										start_scheme = {
											type = abduct
											target = scope:secondary_recipient
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:recipient = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = { value = scope:recipient.ai_honor divide = 10}
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_vengefulness divide = -10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:murder_option = yes }
			scope:actor = { POD_commit_murder_effect = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:recipient = {
						start_scheme = {
							type = murder
							target = scope:secondary_recipient
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:recipient = {
								start_scheme = {
									type = murder
									target = scope:secondary_recipient
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:recipient = {
								start_scheme = {
									type = murder
									target = scope:secondary_recipient
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:recipient = {
										start_scheme = {
											type = murder
											target = scope:secondary_recipient
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:recipient = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = { value = scope:recipient.ai_honor divide = 10}
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_vengefulness divide = -10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:inquihunt_option = yes }
			scope:actor = { POD_commit_murder_effect = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				scope:actor = {
					send_interface_toast = {
						title = dominate_toast_success_title
						left_icon = scope:recipient
						right_icon = scope:secondary_recipient
						scope:recipient = {
							start_scheme = {
								type = inquihunt
								target = scope:secondary_recipient
							}
						}
					}
				}
			}
			else = {
				random_list = {
					10 = {
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
							add = 9
							scope:actor = { has_perk = will_conquers_perk }
						}
						scope:actor = {
							send_interface_toast = {
								title = dominate_toast_success_title
								left_icon = scope:recipient
								right_icon = scope:secondary_recipient
								scope:recipient = {
									start_scheme = {
										type = inquihunt
										target = scope:secondary_recipient
									}
								}
							}
						}
					}
					10 = {
						modifier = {
							add = 15
							scope:recipient = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = -5
							scope:recipient = {
								has_relation_rival = scope:secondary_recipient
							}
						}
						scope:actor = {
							send_interface_toast = {
								title = dominate_toast_failure_title
								left_icon = scope:actor
								right_icon = scope:recipient
								POD_masquerade_exposure_increase_multiple_effect = { AMOUNT = 4 }
								#inquihunt not setup to handle targeting the PC
								# random = {
								# 	chance = 50
								# 	scope:recipient = {
								# 		start_scheme = {
								# 			type = inquihunt
								# 			target = scope:actor
								# 		}
								# 	}
								# }
							}
						}
					}
				}
			}
		}

		else_if = {
			limit = { scope:stop_war_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						every_character_war = {
							limit = {
								primary_attacker = scope:recipient
							}
							end_war = white_peace
						}
						custom_tooltip = POD_dominate_interaction_cooldown
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:actor = {
								every_character_war = {
									limit = {
										primary_attacker = scope:recipient
									}
									end_war = white_peace
								}
								custom_tooltip = POD_dominate_interaction_cooldown
								add_character_flag  =  { flag = dominate_stop_war_cooldown years = 10 }
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								every_character_war = {
									limit = {
										primary_attacker = scope:recipient
									}
									end_war = white_peace
								}
								custom_tooltip = POD_dominate_interaction_cooldown
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:actor = {
										every_character_war = {
											limit = {
												primary_attacker = scope:recipient
											}
											end_war = white_peace
										}
										custom_tooltip = POD_dominate_interaction_cooldown
										add_character_flag  =  { flag = dominate_stop_war_cooldown years = 10 }
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 7
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_vengefulness divide = 10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:condition_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:recipient
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:recipient
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						if = {
							limit = {
								AND = {
									has_variable_list = conditioned_targets
									is_target_in_variable_list = {
										name = conditioned_targets
										target = scope:recipient
									}
								}
							}
							custom_tooltip = POD_dominate_interaction_condition_reinforce_ct
							custom_tooltip = POD_dominate_interaction_condition_current_ct
							add_hook = {
								type = conditioning_hook
								target = scope:recipient
							}
							scope:recipient = {
								set_variable = { name = conditioning_level days = 3650 value = 5 }
								trigger_event = { id = POD_dominate.100 years = 10 }
							}
						}
						else = {
							custom_tooltip = POD_dominate_interaction_condition_create_ct
							scope:recipient = {
								if = {
									limit = {
										has_variable = conditioning_level
									}
									
									change_variable  = { name = conditioning_level add = 1  }
									custom_tooltip = POD_dominate_interaction_condition_current_ct
									
									if = {
										limit = { var:conditioning_level > 3 }
										scope:actor = {
											add_hook = {
												type = conditioning_hook
												target = scope:recipient
											}
											add_to_variable_list = {
												name = conditioned_targets
												target = scope:recipient
											}
										}
										trigger_event = { id = POD_dominate.100 years = 10 }
										set_variable = { name = conditioning_level days = 3650 value = 5 }
									}
								}
								else = {
									set_variable = { name = conditioning_level days = 3650 value = 1 }
								}
							}
							
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:recipient
							scope:actor = {
								if = {
									limit = {
										AND = {
											has_variable_list = conditioned_targets
											is_target_in_variable_list = {
												name = conditioned_targets
												target = scope:recipient
											}
										}
									}
									custom_tooltip = POD_dominate_interaction_condition_reinforce_ct
									add_hook = {
										type = conditioning_hook
										target = scope:recipient
									}
									scope:recipient = {
										set_variable = { name = conditioning_level days = 3650 value = 5 }
										trigger_event = { id = POD_dominate.100 years = 10 }
									}
								}
								else = {
									custom_tooltip = POD_dominate_interaction_condition_create_ct
									scope:recipient = {
										if = {
											limit = {
												has_variable = conditioning_level
											}
											
											change_variable  = { name = conditioning_level add = 1  }
											
											if = {
												limit = { var:conditioning_level > 4 }
												scope:actor = {
													add_hook = {
														type = conditioning_hook
														target = scope:recipient
													}
													add_to_variable_list = {
														name = conditioned_targets
														target = scope:recipient
													}
												}
												trigger_event = { id = POD_dominate.100 years = 10 }
												set_variable = { name = conditioning_level days = 3650 value = 5 }
											}
										}
										else = {
											set_variable = { name = conditioning_level days = 3650 value = 1 }
										}
									}
									
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								if = {
									limit = {
										AND = {
											has_variable_list = conditioned_targets
											is_target_in_variable_list = {
												name = conditioned_targets
												target = scope:recipient
											}
										}
									}
									custom_tooltip = POD_dominate_interaction_condition_reinforce_ct
									add_hook = {
										type = conditioning_hook
										target = scope:recipient
									}
									scope:recipient = {
										set_variable = { name = conditioning_level days = 3650 value = 5 }
										trigger_event = { id = POD_dominate.100 years = 10 }
									}
								}
								else = {
									custom_tooltip = POD_dominate_interaction_condition_create_ct
									scope:recipient = {
										if = {
											limit = {
												has_variable = conditioning_level
											}
											
											change_variable  = { name = conditioning_level add = 1  }
											custom_tooltip = POD_dominate_interaction_condition_current_ct
											if = {
												limit = { var:conditioning_level > 3 }
												scope:actor = {
													add_hook = {
														type = conditioning_hook
														target = scope:recipient
													}
													add_to_variable_list = {
														name = conditioned_targets
														target = scope:recipient
													}
												}
												trigger_event = { id = POD_dominate.100 years = 10 }
												set_variable = { name = conditioning_level days = 3650 value = 5 }
											}
										}
										else = {
											set_variable = { name = conditioning_level days = 3650 value = 1 }
										}
									}
									
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:recipient
									scope:actor = {
										if = {
											limit = {
												AND = {
													has_variable_list = conditioned_targets
													is_target_in_variable_list = {
														name = conditioned_targets
														target = scope:recipient
													}
												}
											}
											custom_tooltip = POD_dominate_interaction_condition_reinforce_ct
											add_hook = {
												type = conditioning_hook
												target = scope:recipient
											}
											scope:recipient = {
												set_variable = { name = conditioning_level days = 3650 value = 5 }
												trigger_event = { id = POD_dominate.100 years = 10 }
											}
										}
										else = {
											custom_tooltip = POD_dominate_interaction_condition_create_ct
											scope:recipient = {
												if = {
													limit = {
														has_variable = conditioning_level
													}
													
													change_variable  = { name = conditioning_level add = 1  }
													
													if = {
														limit = { var:conditioning_level > 4 }
														scope:actor = {
															add_hook = {
																type = conditioning_hook
																target = scope:recipient
															}
															add_to_variable_list = {
																name = conditioned_targets
																target = scope:recipient
															}
														}
														trigger_event = { id = POD_dominate.100 years = 10 }
														set_variable = { name = conditioning_level days = 3650 value = 5 }
													}
												}
												else = {
													set_variable = { name = conditioning_level days = 3650 value = 1 }
												}
											}
											
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:recipient.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:recipient = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = { value = scope:recipient.ai_honor divide = -10}
							always = yes
						}
						modifier = {
							add = { value = scope:recipient.ai_vengefulness divide = 10}
							always = yes
						}
						custom_tooltip = POD_dominate_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:recipient
									
								}
							}
						}
					}
				
				}
			}
		}
		else_if = {
			limit = { scope:have_crazy_sex_with_me_option = yes }
			if = {
				show_as_tooltip = {
                    scope:actor = {
                        scope:recipient = {
                            custom_tooltip = POD_dominate_interaction_have_crazy_sex_with_me_option_ct
                        }
                        # pay money for prostitution, and possibly lose piety if your faith dislikes this
                        #if = {
                        #    limit = {
                        #        scope:recipient = {
                        #            carn_is_working_as_prostitute_trigger = yes
                        #        }
                        #        NOT = {
                        #            carn_relationship_allows_free_sex_trigger = {
                        #                PARTNER = scope:recipient
                        #            }
                        #        }
                        #    }
                        #    pay_short_term_gold = {
                        #        target = scope:recipient
                        #        gold = scope:recipient.carn_prostitute_sex_interaction_price_value
                        #    }
                        #    if = {
                        #        limit = {
                        #            faith = { NOT = { has_doctrine = carn_doctrine_prostitution_accepted } }
                        #        }
                        #        add_piety = minor_piety_loss
                        #    }
                        #}

                        if = {
                            limit = {
                                NOT = { has_character_flag = carn_sex_interaction_effect_cd }
                            }

                            # show possible effects from sex scene
                            show_as_tooltip = {
                                carn_had_sex_with_effect_v2 = {
                                    PARTNER = scope:recipient
                                }
                            }

                            ### STRESS ###
                            if = {
                                limit = {
                                    is_attracted_to_gender_of = scope:recipient
                                }
                                stress_impact = {
                                    base = minor_stress_impact_loss
                                    chaste = activity_stress_gain_impact
                                }
                            }
                            else = {
                                custom_tooltip = carn_sex_interaction_not_attracted_to_warning_tt
                                stress_impact = {
                                    base = major_stress_impact_gain
                                }
                            }

                            add_character_flag = {
                                flag = carn_sex_interaction_effect_cd
                                months = carn_sex_interaction_cooldown_base
                            }
                        }
                        else = {
                            custom_tooltip = carn_sex_interaction_effect_cd_tt
                        }

                        # request the sex scene
                        hidden_effect = {

                            # lovers and soulmates always consensual
                            if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            has_relation_lover = scope:recipient
                                            has_relation_soulmate = scope:recipient
                                        }
                                    }
                                }
                                carn_sex_scene_is_consensual_effect = yes
                            }
                            # for slaves and concubines, get scenes ranging from consensual to noncon
                            else_if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            is_concubine_of = scope:recipient
                                            has_relation_slave_owner = scope:recipient
                                        }
                                    }
                                }
                                # Consensual: I'm into you, and I either like you or you're super hot
                                if = {
                                    limit = {
                                        scope:recipient = {
                                            OR = {
                                                opinion = {
                                                    target = scope:actor
                                                    value >= 50
                                                }
                                                scope:actor = { attraction >= 20 } # if you're hot enough they'll happily hatefuck you
                                            }
                                            is_attracted_to_gender_of = scope:actor
                                        }
                                    }
                                    carn_sex_scene_is_consensual_effect = yes
                                }
                                # dubcon: Either I'm into you but not that into you, or I don't swing that way but I like you enough to humor you
                                else_if = {
                                    limit = {
                                        scope:recipient = {
                                            OR = {
                                                AND = {
                                                    is_attracted_to_gender_of = scope:actor
                                                    OR = {
                                                        opinion = {
                                                            target = scope:actor
                                                            value > 0
                                                        }
                                                        scope:actor = { attraction >= 10 } # if you're hot enough they'll be kinda ok with it
                                                    }
                                                }
                                                AND = {
                                                    NOT = { is_attracted_to_gender_of = scope:actor }
                                                    opinion = {
                                                        target = scope:actor
                                                        value >= 75
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    carn_sex_scene_is_dubcon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                                # Noncon: I either hate you or I don't swing this way, get me outta here
                                else = {
                                    carn_sex_scene_is_noncon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                            }
                            # get dubcon for characters that dislike you / are not attracted to you (but accept sex with you for some reason, like being a prostitute)
                            else_if = {
                                limit = {
                                    scope:recipient = {
                                        OR = {
                                            opinion = {
                                                target = scope:actor
                                                value < 0
                                            }
                                            NOT = { is_attracted_to_gender_of = scope:actor }
                                        }
                                    }
                                }
                                carn_sex_scene_is_dubcon_effect = yes
                                carn_sex_scene_character_is_dom_player_effect = yes
                            }
                            # fallback to consensual scene
                            else = {
                                carn_sex_scene_is_consensual_effect = yes
                            }

                            random_list = {
                                60 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_inside_effect = yes
                                }
                                20 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_outside_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_anal_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_oral_effect = yes
                                }
                            }
                            carn_sex_scene_character_is_giving_player_effect = yes
                            # actually fire the sex scene
                            carn_sex_scene_effect_v2 = {
                                    PARTNER = scope:recipient
                            }
                        }
                    }
				}
                hidden_effect = {
                    scope:actor = {
                        scope:recipient = {
                            custom_tooltip = POD_dominate_interaction_have_crazy_sex_with_me_option_ct
                        }
                        # pay money for prostitution, and possibly lose piety if your faith dislikes this
                        #if = {
                        #    limit = {
                        #        scope:recipient = {
                        #            carn_is_working_as_prostitute_trigger = yes
                        #        }
                        #        NOT = {
                        #            carn_relationship_allows_free_sex_trigger = {
                        #                PARTNER = scope:recipient
                        #            }
                        #        }
                        #    }
                        #    pay_short_term_gold = {
                        #        target = scope:recipient
                        #        gold = scope:recipient.carn_prostitute_sex_interaction_price_value
                        #    }
                        #    if = {
                        #        limit = {
                        #            faith = { NOT = { has_doctrine = carn_doctrine_prostitution_accepted } }
                        #        }
                        #        add_piety = minor_piety_loss
                        #    }
                        #}

                        if = {
                            limit = {
                                NOT = { has_character_flag = carn_sex_interaction_effect_cd }
                            }

                            # show possible effects from sex scene
                            show_as_tooltip = {
                                carn_had_sex_with_effect_v2 = {
                                    PARTNER = scope:recipient
                                }
                            }

                            ### STRESS ###
                            if = {
                                limit = {
                                    is_attracted_to_gender_of = scope:recipient
                                }
                                stress_impact = {
                                    base = minor_stress_impact_loss
                                    chaste = activity_stress_gain_impact
                                }
                            }
                            else = {
                                custom_tooltip = carn_sex_interaction_not_attracted_to_warning_tt
                                stress_impact = {
                                    base = major_stress_impact_gain
                                }
                            }

                            add_character_flag = {
                                flag = carn_sex_interaction_effect_cd
                                months = carn_sex_interaction_cooldown_base
                            }
                        }
                        else = {
                            custom_tooltip = carn_sex_interaction_effect_cd_tt
                        }

                        # request the sex scene
                        hidden_effect = {

                            # lovers and soulmates always consensual
                            if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            has_relation_lover = scope:recipient
                                            has_relation_soulmate = scope:recipient
                                        }
                                    }
                                }
                                carn_sex_scene_is_consensual_effect = yes
                            }
                            # for slaves and concubines, get scenes ranging from consensual to noncon
                            else_if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            is_concubine_of = scope:recipient
                                            has_relation_slave_owner = scope:recipient
                                        }
                                    }
                                }
                                # Consensual: I'm into you, and I either like you or you're super hot
                                if = {
                                    limit = {
                                        scope:recipient = {
                                            OR = {
                                                opinion = {
                                                    target = scope:actor
                                                    value >= 50
                                                }
                                                scope:actor = { attraction >= 20 } # if you're hot enough they'll happily hatefuck you
                                            }
                                            is_attracted_to_gender_of = scope:actor
                                        }
                                    }
                                    carn_sex_scene_is_consensual_effect = yes
                                }
                                # dubcon: Either I'm into you but not that into you, or I don't swing that way but I like you enough to humor you
                                else_if = {
                                    limit = {
                                        scope:recipient = {
                                            OR = {
                                                AND = {
                                                    is_attracted_to_gender_of = scope:actor
                                                    OR = {
                                                        opinion = {
                                                            target = scope:actor
                                                            value > 0
                                                        }
                                                        scope:actor = { attraction >= 10 } # if you're hot enough they'll be kinda ok with it
                                                    }
                                                }
                                                AND = {
                                                    NOT = { is_attracted_to_gender_of = scope:actor }
                                                    opinion = {
                                                        target = scope:actor
                                                        value >= 75
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    carn_sex_scene_is_dubcon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                                # Noncon: I either hate you or I don't swing this way, get me outta here
                                else = {
                                    carn_sex_scene_is_noncon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                            }
                            # get dubcon for characters that dislike you / are not attracted to you (but accept sex with you for some reason, like being a prostitute)
                            else_if = {
                                limit = {
                                    scope:recipient = {
                                        OR = {
                                            opinion = {
                                                target = scope:actor
                                                value < 0
                                            }
                                            NOT = { is_attracted_to_gender_of = scope:actor }
                                        }
                                    }
                                }
                                carn_sex_scene_is_dubcon_effect = yes
                                carn_sex_scene_character_is_dom_player_effect = yes
                            }
                            # fallback to consensual scene
                            else = {
                                carn_sex_scene_is_consensual_effect = yes
                            }

                            random_list = {
                                60 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_inside_effect = yes
                                }
                                20 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_outside_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_anal_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_oral_effect = yes
                                }
                            }
                            carn_sex_scene_character_is_giving_player_effect = yes
                            # actually fire the sex scene
                            carn_sex_scene_effect_v2 = {
                                    PARTNER = scope:recipient
                            }
                        }
                    }
                }
			}
		}
	}
	auto_accept = {
		always = yes
	}
}


POD_mark_secondary_target_interaction = {

	category = interaction_category_vampire
	desc = POD_mark_secondary_target_interaction_desc
	icon = POD_dominate_interaction
	
	is_shown = {
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = {
			has_perk = mesmerize_perk
		}
		scope:actor = {
			OR = { 
				has_variable_list = dominated_targets
				has_variable_list = conditioned_targets
			}
			OR = {
				trigger_if = {
					limit = {
						has_variable_list = dominated_targets
					} 
					variable_list_size = {
						name = dominated_targets
						value >= 1
					}
				}
				
				trigger_if = {
					limit = {
						has_variable_list = conditioned_targets
					} 
					variable_list_size = {
						name = conditioned_targets
						value >= 1
					}
				}
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = torpor }
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }	
		}
		POD_cross_umbra_interaction_valid_trigger = yes
	}
	on_accept = {
		custom_tooltip = POD_mark_secondary_target_interaction_ct
		scope:actor = {
			if = {
				limit = { is_target_in_variable_list = { name = secondary_target target = scope:recipient } }
				remove_list_variable = { name = secondary_target target = scope:recipient }
			}
			else = {
				add_to_variable_list = { name = secondary_target target = scope:recipient }
			}
		}
	}
	auto_accept = yes
}

POD_forgetful_mind_interaction = {
	category = interaction_category_vampire
	desc = POD_forgetful_mind_interaction_desc
	
	cooldown_against_recipient = { years = 5 }
	
	is_shown = {
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = {
			has_perk = the_forgetful_mind_perk
		}
		NOT = { scope:actor = scope:recipient }
	}


	is_valid_showing_failures_only = {
		scope:recipient = { 
			NOT = { has_trait = automaton }
			NOT = { has_trait = torpor }
			custom_description = { text = POD_do_not_disturb_text NOT = { has_character_flag = POD_do_not_disturb_flag } }	
			POD_is_not_clone_trigger = yes
		}
		POD_cross_umbra_interaction_valid_trigger = yes
		scope:actor = { NOT = { has_character_modifier = bloodhunger5_modifier } }
	}
	
	on_accept = {
		
		custom_tooltip = forgetful_mind_duel_ct 
		scope:actor = { POD_hunger_rouse_check_effect = yes }
		random_list = {
			0 = {
				modifier = {
					add = scope:actor.stewardship
					always = yes
				}
				modifier = {
					add = 5
					scope:actor = {
						has_trait = dominateadvanced
					}
				}
				modifier = {
					factor = 2
					scope:actor = {
						has_perk = will_conquers_perk
					}
				}
				scope:actor = {
					
					send_interface_toast = {
						left_icon = scope:actor
						right_icon = scope:recipient
						title = forgetful_mind_duel_success_title
					
						scope:recipient = {
								add_opinion = {
									target = scope:actor
									modifier = POD_forgetful_mind_opinion
								}
							}
						}
					}
				}
			0 = {
				modifier = {
					add = scope:recipient.stewardship
					always = yes
				}
				modifier = {
					add = 5
					scope:recipient = {
						has_trait = fortitude
					}
				}
				modifier = {
					add = 10
					scope:recipient= {
						has_trait = fortitudeadvanced
					}
				}
				scope:actor = {
					send_interface_toast = {
						left_icon = scope:actor
						right_icon = scope:recipient
						title = forgetful_mind_duel_failure_title
				
				scope:recipient = {
						add_opinion = {
							target = scope:actor
							opinion = -50
							modifier = hate_opinion
						}
					}
									
				}					
				}
			}
		
		}
		

	}
	auto_accept = {
		always = yes
	}
	
}

POD_dominate_self_interaction = {
	category = interaction_category_vampire
	desc = POD_dominate_self_interaction_desc
	icon = POD_dominate_interaction
	
	is_shown = {
		scope:actor = scope:recipient 
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = {
			has_perk = mesmerize_perk
		}
		scope:actor = {
			OR = { 
				has_variable_list = dominated_targets
				has_variable_list = conditioned_targets
			}
			OR = {
				trigger_if = {
					limit = {
						has_variable_list = dominated_targets
					} 
					variable_list_size = {
						name = dominated_targets
						value >= 1
					}
				}
				
				trigger_if = {
					limit = {
						has_variable_list = conditioned_targets
					} 
					variable_list_size = {
						name = conditioned_targets
						value >= 1
					}
				}
			}
		}
	}
	
	populate_actor_list = {
		scope:actor = {
			if = {
				limit = { has_variable_list = dominated_targets }
				every_in_list = {
					variable = dominated_targets
					limit = { is_alive = yes }
					add_to_list = characters
				}
			}
			
			if = {
				limit = { has_variable_list = conditioned_targets }
				every_in_list = {
					variable = conditioned_targets
					limit = { is_alive = yes }
					add_to_list = characters
				}
			}
			
		}
	}
	
	populate_recipient_list = {
		scope:actor = {
			every_in_list = {
				variable = secondary_target
				limit = { is_alive = yes }
				add_to_list = characters
			}
			add_to_list = characters
		}
	}
	
	can_send = {
		scope:actor = {
			trigger_if = {
				limit = {
					AND = {
						has_variable_list = conditioned_targets
						is_target_in_variable_list = {
							name = conditioned_targets
							target = scope:secondary_actor
						}
					}
				}
				custom_description = {
					text = POD_power_cooldown
					NOT = { scope:secondary_actor = { has_character_flag = conditioned_commanded  } } 
				}
			}
		}
	}
	
	send_option = {	
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor = {
				is_landed = yes
			}
		}
		is_valid = { scope:secondary_actor = { monthly_character_income > 0 } } 								
		flag = gold_option							
		localization = POD_dominate_self_interaction_gold_option																			
	}
	
	send_option = {									
		flag = embarass_option							
		localization = POD_dominate_self_interaction_embarass_option																			
	}
	
	send_option = {	
		is_valid = { 
			scope:secondary_actor ?= {
				any_known_secret = {
					NOT = { is_known_by = scope:actor }
				}
			} 
		} 								
		flag = reveal_secret_option							
		localization = POD_dominate_self_interaction_reveal_secret_option																		
	}
	
	send_option = {	
		is_shown = { 
			scope:secondary_actor ?= {
				is_landed = no
				NOT = { is_courtier_of = scope:actor }
			}
		}								
		flag = recruit_option							
		localization = POD_dominate_self_interaction_recruit_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:secondary_actor ?= {
				is_landed = yes
				is_vampire_trigger = yes
			}
		}
		is_valid = { 
			scope:secondary_actor = {
				NOT = { has_character_modifier = masquerade5_modifier}
			} 
		} 								
		flag = masq_option							
		localization = POD_dominate_self_interaction_masq_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:actor = {
				has_perk = terminal_decree_perk
			}
		}							
		flag = suicide_option							
		localization = POD_dominate_self_interaction_suicide_option																			
	}
	
	send_option = {	
		is_shown = {
			scope:actor = {
				OR = {
					has_perk = conditioning_perk
					has_trait = dominateadvanced
				}
			}
		}							
		flag = condition_option							
		localization = POD_dominate_self_interaction_condition_option																			
	}
	
	send_option = {	
		is_shown = {
			scope:secondary_actor ?= {
				any_scheme = {
					scheme_target = scope:secondary_recipient
				}
			}
		}						
		flag = stop_scheme_option							
		localization = POD_dominate_self_interaction_stop_scheme_option																			
	}
	
	send_option = {	
		is_shown = { 
			scope:actor = {
				has_perk = concord_of_submission_perk
			}
			scope:actor = {
				any_character_war = {
					primary_attacker = scope:secondary_actor
				}
			}
		}								
		flag = stop_war_option							
		localization = POD_dominate_self_interaction_stop_war_option																			
	}
	
	send_option = {	
		is_shown = {
			scope:actor = {
				scope:secondary_recipient ?= {
					is_imprisoned_by = scope:secondary_actor
				}	
			}
		}								
		flag = release_prisoner_option							
		localization = POD_dominate_self_interaction_release_prisoner_option																		
	}
	
	send_option = {	
		is_shown = {
			scope:secondary_actor ?= {
				can_start_scheme = {
					target = scope:secondary_recipient
					type = abduct 
				}		
			}
			
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
		}							
		flag = abduct_option						
		localization = POD_dominate_self_interaction_abduct_option																		
	}
	
	send_option = {	
		is_shown = {
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
			scope:secondary_actor ?= {
				can_start_scheme = {
					target = scope:secondary_recipient
					type = murder 
				}	
				
			}
		}							
		flag = murder_option						
		localization = POD_dominate_self_interaction_murder_option																		
	}

	#use a hunter to start an inquisition hunt against a third party
	send_option = {
		is_shown = {
			scope:actor = { 
				OR = {
					has_trait = dominateadvanced
					has_perk = rationalize_perk 
				}
			}
			exists = scope:secondary_recipient
			exists = scope:secondary_actor
		}
		is_valid = {
			scope:secondary_actor = {
				can_start_scheme = { type = inquihunt target = scope:secondary_recipient }
			}
		}
		flag = inquihunt_option
		localization = POD_dominate_self_interaction_inquihunt_option
	}

    send_option = {
        flag = have_crazy_sex_with_me_option
        localization = POD_dominate_interaction_have_crazy_sex_with_me_option
    }
	
	on_accept = {
		
		scope:actor = {
			if = {
				limit = {
					has_variable_list = conditioned_targets
					is_target_in_variable_list = {
						name = conditioned_targets
						target = scope:secondary_actor
					}
				}
				scope:secondary_actor = {
					add_character_flag = { flag = conditioned_commanded years = 1}
				}
				custom_tooltip = POD_dominate_self_interaction_condition_cooldown_ct
			}
			else = {
				use_hook = scope:secondary_actor
				remove_list_variable = {
					name = dominated_targets
					target = scope:secondary_actor
				}
				
			}
		}
		
		if = {		
			limit = { scope:gold_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					if = {
						limit = { scope:actor = { has_perk = rationalize_perk } }
						scope:secondary_actor = { 
							pay_long_term_income = {
								target = scope:actor
								months = 9
							}
						}
					}
					else = {
						scope:secondary_actor = { 
							pay_long_term_income = {
								target = scope:actor
								months = 3
							}
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							if = {
								limit = { scope:actor = { has_perk = rationalize_perk } }
								scope:secondary_actor = { 
									pay_long_term_income = {
										target = scope:actor
										months = 9
									}
								}
							}
							else = {
								scope:secondary_actor = { 
									pay_long_term_income = {
										target = scope:actor
										months = 3
									}
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						
						modifier = {
							factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							if = {
								limit = { scope:actor = { has_perk = rationalize_perk } }
								scope:secondary_actor = { 
									pay_long_term_income = {
										target = scope:actor
										months = 9
									}
								}
							}
							else = {
								scope:secondary_actor = { 
									pay_long_term_income = {
										target = scope:actor
										months = 3
									}
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									if = {
										limit = { scope:actor = { has_perk = rationalize_perk } }
										scope:secondary_actor = { 
											pay_long_term_income = {
												target = scope:actor
												months = 9
											}
										}
									}
									else = {
										scope:secondary_actor = { 
											pay_long_term_income = {
												target = scope:actor
												months = 3
											}
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_greed divide = 10 }
							always = yes
						}
						modifier = {
							factor = 2
							scope:secondary_actor = { has_trait = greedy }
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:embarass_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						add_prestige = -100
						random = {
							chance = 10
							increase_wounds_no_death_effect = { REASON = fight }
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								add_prestige = -100
								random = {
									chance = 10
									increase_wounds_no_death_effect = { REASON = fight }
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								add_prestige = -100
								random = {
									chance = 10
									increase_wounds_no_death_effect = { REASON = fight }
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										add_prestige = -100
										random = {
											chance = 10
											increase_wounds_no_death_effect = { REASON = fight }
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 2
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							factor = 2
							scope:secondary_actor = {
								has_trait = arrogant
							}
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:reveal_secret_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						random_known_secret = {
							limit = { NOT = { is_known_by = scope:actor }}
							reveal_to = scope:actor
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							hidden_effect = {
								scope:secondary_actor = {
									random_known_secret = {
										limit = { NOT = { is_known_by = scope:actor }}
										reveal_to = scope:actor
									}
								}
							}
							custom_tooltip = POD_dominate_self_interaction_reveal_secret_option_ct
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								random_known_secret = {
									limit = { NOT = { is_known_by = scope:actor }}
									reveal_to = scope:actor
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									hidden_effect = {
										scope:secondary_actor = {
											random_known_secret = {
												limit = { NOT = { is_known_by = scope:actor }}
												reveal_to = scope:actor
											}
										}
									}
									custom_tooltip = POD_dominate_self_interaction_reveal_secret_option_ct
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 5
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							factor = 2
							scope:secondary_actor = { has_trait = deceitful}
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:recruit_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						add_courtier = scope:secondary_actor
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:actor = {
								add_courtier = scope:secondary_actor
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								add_courtier = scope:secondary_actor
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:actor = {
										add_courtier = scope:secondary_actor
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:masq_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						POD_masquerade_exposure_increase_effect = yes
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								POD_masquerade_exposure_increase_effect = yes
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								POD_masquerade_exposure_increase_effect = yes
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										POD_masquerade_exposure_increase_effect = yes
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:secondary_actor.faith = { has_doctrine = doctrine_vampirethemasquerade_strict  }
						}
						modifier = {
							factor = 0
							scope:secondary_actor.faith = { has_doctrine = doctrine_vampirethemasquerade_none  }
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:suicide_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						random_list = {
							2 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
							3 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
							5 = {
								increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
							}
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								hidden_effect = {
									random_list = {
										2 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
										3 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
										5 = {
											increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
										}
									}
								}
								custom_tooltip = POD_dominate_self_interaction_suicide_option_ct
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
							
								random_list = {
									2 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
									3 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
									5 = {
										increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
									}
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										hidden_effect = {
											random_list = {
												2 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 2 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
												3 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 3 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
												5 = {
													increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
												}
											}
										}
										custom_tooltip = POD_dominate_self_interaction_suicide_option_ct
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 20
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		else_if = {
			limit = { scope:release_prisoner_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_recipient = {
							release_from_prison = yes
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_recipient = {
								release_from_prison = yes
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_recipient = {
								release_from_prison = yes
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_recipient = {
										release_from_prison = yes
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = 10
							scope:secondary_actor = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
		}
		
		else_if = {
			limit = { scope:stop_scheme_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						every_scheme = {
							limit = {
								scheme_target = scope:secondary_recipient
							}
							end_scheme = yes
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								every_scheme = {
									limit = {
										scheme_target = scope:secondary_recipient
									}
									end_scheme = yes
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								every_scheme = {
									limit = {
										scheme_target = scope:secondary_recipient
									}
									end_scheme = yes
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										every_scheme = {
											limit = {
												scheme_target = scope:secondary_recipient
											}
											end_scheme = yes
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:secondary_actor = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_honor divide = -10}
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_vengefulness divide = 10}
							always = yes
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:abduct_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:secondary_actor = {
						start_scheme = {
							type = abduct
							target = scope:secondary_recipient
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								start_scheme = {
									type = abduct
									target = scope:secondary_recipient
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								start_scheme = {
									type = abduct
									target = scope:secondary_recipient
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										start_scheme = {
											type = abduct
											target = scope:secondary_recipient
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:secondary_actor = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_honor divide = 10}
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_vengefulness divide = -10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:murder_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				scope:actor = { POD_commit_murder_effect = yes }
				show_as_tooltip = {
					scope:secondary_actor = {
						start_scheme = {
							type = murder
							target = scope:secondary_recipient
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:secondary_actor = {
								start_scheme = {
									type = murder
									target = scope:secondary_recipient
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:secondary_actor = {
								start_scheme = {
									type = murder
									target = scope:secondary_recipient
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:secondary_actor = {
										start_scheme = {
											type = murder
											target = scope:secondary_recipient
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:secondary_actor = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_honor divide = 10}
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_vengefulness divide = -10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}

		else_if = {
			limit = { scope:inquihunt_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				scope:actor = {
					send_interface_toast = {
						title = dominate_toast_success_title
						left_icon = scope:secondary_actor
						right_icon = scope:secondary_recipient
						scope:secondary_recipient = {
							start_scheme = {
								type = inquihunt
								target = scope:secondary_recipient
							}
						}
					}
				}
			}
			else = {
				random_list = {
					10 = {
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
							add = 9
							scope:actor = { has_perk = will_conquers_perk }
						}
						scope:actor = {
							send_interface_toast = {
								title = dominate_toast_success_title
								left_icon = scope:secondary_actor
								right_icon = scope:secondary_recipient
								scope:secondary_actor = {
									start_scheme = {
										type = inquihunt
										target = scope:secondary_recipient
									}
								}
							}
						}
					}
					10 = {
						modifier = {
							add = 15
							scope:secondary_actor = {
								OR = { 
									has_relation_friend  = scope:secondary_recipient
									is_close_family_of = scope:secondary_recipient
								}
							}
						}
						modifier = {
							add = -5
							scope:secondary_actor = {
								has_relation_rival = scope:secondary_recipient
							}
						}
						scope:actor = {
							send_interface_toast = {
								title = dominate_toast_failure_title
								left_icon = scope:actor
								right_icon = scope:secondary_actor
								POD_masquerade_exposure_increase_multiple_effect = { AMOUNT = 4 }
								#inquihunt not setup to handle targeting the PC
								# random = {
								# 	chance = 50
								# 	scope:secondary_actor = {
								# 		start_scheme = {
								# 			type = inquihunt
								# 			target = scope:actor
								# 		}
								# 	}
								# }
							}
						}
					}
				}
			}
		}
		
		else_if = {
			limit = { scope:stop_war_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						every_character_war = {
							limit = {
								primary_attacker = scope:secondary_actor
							}
							end_war = white_peace
						}
						custom_tooltip = POD_dominate_self_interaction_cooldown
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:actor = {
								every_character_war = {
									limit = {
										primary_attacker = scope:secondary_actor
									}
									end_war = white_peace
								}
								custom_tooltip = POD_dominate_self_interaction_cooldown
								add_character_flag  =  { flag = dominate_stop_war_cooldown years = 10 }
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								every_character_war = {
									limit = {
										primary_attacker = scope:secondary_actor
									}
									end_war = white_peace
								}
								custom_tooltip = POD_dominate_self_interaction_cooldown
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:actor = {
										every_character_war = {
											limit = {
												primary_attacker = scope:secondary_actor
											}
											end_war = white_peace
										}
										custom_tooltip = POD_dominate_self_interaction_cooldown
										add_character_flag  =  { flag = dominate_stop_war_cooldown years = 10 }
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 7
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_vengefulness divide = 10}
							always = yes
						}
						
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
		
		else_if = {
			limit = { scope:condition_option = yes }
			if = {
				limit = {
					scope:actor = {
						OR = {
							
							has_hook_of_type = {
								target = scope:secondary_actor
								type = conditioning_hook
							}
							
							AND = {
								has_variable_list = conditioned_targets
								is_target_in_variable_list = {
									name = conditioned_targets
									target = scope:secondary_actor
								}
							}
						}
					}
				}
				show_as_tooltip = {
					scope:actor = {
						if = {
							limit = {
								AND = {
									has_variable_list = conditioned_targets
									is_target_in_variable_list = {
										name = conditioned_targets
										target = scope:secondary_actor
									}
								}
							}
							custom_tooltip = POD_dominate_self_interaction_condition_reinforce_ct
							custom_tooltip = POD_dominate_self_interaction_condition_current_ct
							add_hook = {
								type = conditioning_hook
								target = scope:secondary_actor
							}
							scope:secondary_actor = {
								set_variable = { name = conditioning_level days = 3650 value = 5 }
								trigger_event = { id = POD_dominate.100 years = 10 }
							}
						}
						else = {
							custom_tooltip = POD_dominate_self_interaction_condition_create_ct
							scope:secondary_actor = {
								if = {
									limit = {
										has_variable = conditioning_level
									}
									
									change_variable  = { name = conditioning_level add = 1  }
									custom_tooltip = POD_dominate_self_interaction_condition_current_ct
									
									if = {
										limit = { var:conditioning_level > 3 }
										scope:actor = {
											add_hook = {
												type = conditioning_hook
												target = scope:secondary_actor
											}
											add_to_variable_list = {
												name = conditioned_targets
												target = scope:secondary_actor
											}
										}
										trigger_event = { id = POD_dominate.100 years = 10 }
										set_variable = { name = conditioning_level days = 3650 value = 5 }
									}
								}
								else = {
									set_variable = { name = conditioning_level days = 3650 value = 1 }
								}
							}
							
						}
					}
				}
				hidden_effect = {
					scope:actor = {
						send_interface_toast = {
							title = dominate_toast_success_title
							left_icon = scope:actor
							right_icon = scope:secondary_actor
							scope:actor = {
								if = {
									limit = {
										AND = {
											has_variable_list = conditioned_targets
											is_target_in_variable_list = {
												name = conditioned_targets
												target = scope:secondary_actor
											}
										}
									}
									custom_tooltip = POD_dominate_self_interaction_condition_reinforce_ct
									add_hook = {
										type = conditioning_hook
										target = scope:secondary_actor
									}
									scope:secondary_actor = {
										set_variable = { name = conditioning_level days = 3650 value = 5 }
										trigger_event = { id = POD_dominate.100 years = 10 }
									}
								}
								else = {
									custom_tooltip = POD_dominate_self_interaction_condition_create_ct
									scope:secondary_actor = {
										if = {
											limit = {
												has_variable = conditioning_level
											}
											
											change_variable  = { name = conditioning_level add = 1  }
											
											if = {
												limit = { var:conditioning_level > 4 }
												scope:actor = {
													add_hook = {
														type = conditioning_hook
														target = scope:secondary_actor
													}
													add_to_variable_list = {
														name = conditioned_targets
														target = scope:secondary_actor
													}
												}
												trigger_event = { id = POD_dominate.100 years = 10 }
												set_variable = { name = conditioning_level days = 3650 value = 5 }
											}
										}
										else = {
											set_variable = { name = conditioning_level days = 3650 value = 1 }
										}
									}
									
								}
							}
						}
					}
				}
				
			}
			else = {
				random_list = {
					0 = {
						modifier = {
							add = scope:actor.stewardship
							always = yes
						}
						modifier = {
							add = 5
							scope:actor = { has_trait = dominateadvanced } 
						}
						modifier = {
						factor = 2
							scope:actor = { has_perk = will_conquers_perk }
						}
						
						show_as_tooltip = {
							scope:actor = {
								if = {
									limit = {
										AND = {
											has_variable_list = conditioned_targets
											is_target_in_variable_list = {
												name = conditioned_targets
												target = scope:secondary_actor
											}
										}
									}
									custom_tooltip = POD_dominate_self_interaction_condition_reinforce_ct
									add_hook = {
										type = conditioning_hook
										target = scope:secondary_actor
									}
									scope:secondary_actor = {
										set_variable = { name = conditioning_level days = 3650 value = 5 }
										trigger_event = { id = POD_dominate.100 years = 10 }
									}
								}
								else = {
									custom_tooltip = POD_dominate_self_interaction_condition_create_ct
									scope:secondary_actor = {
										if = {
											limit = {
												has_variable = conditioning_level
											}
											
											change_variable  = { name = conditioning_level add = 1  }
											custom_tooltip = POD_dominate_self_interaction_condition_current_ct
											if = {
												limit = { var:conditioning_level > 3 }
												scope:actor = {
													add_hook = {
														type = conditioning_hook
														target = scope:secondary_actor
													}
													add_to_variable_list = {
														name = conditioned_targets
														target = scope:secondary_actor
													}
												}
												trigger_event = { id = POD_dominate.100 years = 10 }
												set_variable = { name = conditioning_level days = 3650 value = 5 }
											}
										}
										else = {
											set_variable = { name = conditioning_level days = 3650 value = 1 }
										}
									}
									
								}
							}
						}
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_success_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									scope:actor = {
										if = {
											limit = {
												AND = {
													has_variable_list = conditioned_targets
													is_target_in_variable_list = {
														name = conditioned_targets
														target = scope:secondary_actor
													}
												}
											}
											custom_tooltip = POD_dominate_self_interaction_condition_reinforce_ct
											add_hook = {
												type = conditioning_hook
												target = scope:secondary_actor
											}
											scope:secondary_actor = {
												set_variable = { name = conditioning_level days = 3650 value = 5 }
												trigger_event = { id = POD_dominate.100 years = 10 }
											}
										}
										else = {
											custom_tooltip = POD_dominate_self_interaction_condition_create_ct
											scope:secondary_actor = {
												if = {
													limit = {
														has_variable = conditioning_level
													}
													
													change_variable  = { name = conditioning_level add = 1  }
													
													if = {
														limit = { var:conditioning_level > 4 }
														scope:actor = {
															add_hook = {
																type = conditioning_hook
																target = scope:secondary_actor
															}
															add_to_variable_list = {
																name = conditioned_targets
																target = scope:secondary_actor
															}
														}
														trigger_event = { id = POD_dominate.100 years = 10 }
														set_variable = { name = conditioning_level days = 3650 value = 5 }
													}
												}
												else = {
													set_variable = { name = conditioning_level days = 3650 value = 1 }
												}
											}
											
										}
									}
								}
							}
						}
						
					}
					0 = {
						#Command severity
						modifier = {
							add = 0
							always = yes
						}
						modifier = {
							add = scope:secondary_actor.stewardship
							always = yes
						}
						modifier = {
							add = 10
							scope:secondary_actor = {
								has_relation_rival  = scope:secondary_recipient
							}
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_honor divide = -10}
							always = yes
						}
						modifier = {
							add = { value = scope:secondary_actor.ai_vengefulness divide = 10}
							always = yes
						}
						custom_tooltip = POD_dominate_self_interaction.failure.ct
						hidden_effect = {
							scope:actor = {
								send_interface_toast = {
									title = dominate_toast_failure_title
									left_icon = scope:actor
									right_icon = scope:secondary_actor
									
								}
							}
						}
					}
				
				}
			}
			
		}
        else_if = {
            limit = { scope:have_crazy_sex_with_me_option = yes }
            if = {
                show_as_tooltip = {
                    scope:actor = {
                        scope:secondary_actor = {
                            custom_tooltip = POD_dominate_interaction_have_crazy_sex_with_me_option_ct
                        }
                        # pay money for prostitution, and possibly lose piety if your faith dislikes this
                        #if = {
                        #    limit = {
                        #        scope:secondary_actor = {
                        #            carn_is_working_as_prostitute_trigger = yes
                        #        }
                        #        NOT = {
                        #            carn_relationship_allows_free_sex_trigger = {
                        #                PARTNER = scope:secondary_actor
                        #            }
                        #        }
                        #    }
                        #    pay_short_term_gold = {
                        #        target = scope:secondary_actor
                        #        gold = scope:secondary_actor.carn_prostitute_sex_interaction_price_value
                        #    }
                        #    if = {
                        #        limit = {
                        #            faith = { NOT = { has_doctrine = carn_doctrine_prostitution_accepted } }
                        #        }
                        #        add_piety = minor_piety_loss
                        #    }
                        #}

                        if = {
                            limit = {
                                NOT = { has_character_flag = carn_sex_interaction_effect_cd }
                            }

                            # show possible effects from sex scene
                            show_as_tooltip = {
                                carn_had_sex_with_effect_v2 = {
                                    PARTNER = scope:secondary_actor
                                }
                            }

                            ### STRESS ###
                            if = {
                                limit = {
                                    is_attracted_to_gender_of = scope:secondary_actor
                                }
                                stress_impact = {
                                    base = minor_stress_impact_loss
                                    chaste = activity_stress_gain_impact
                                }
                            }
                            else = {
                                custom_tooltip = carn_sex_interaction_not_attracted_to_warning_tt
                                stress_impact = {
                                    base = major_stress_impact_gain
                                }
                            }

                            add_character_flag = {
                                flag = carn_sex_interaction_effect_cd
                                months = carn_sex_interaction_cooldown_base
                            }
                        }
                        else = {
                            custom_tooltip = carn_sex_interaction_effect_cd_tt
                        }

                        # request the sex scene
                        hidden_effect = {

                            # lovers and soulmates always consensual
                            if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            has_relation_lover = scope:secondary_actor
                                            has_relation_soulmate = scope:secondary_actor
                                        }
                                    }
                                }
                                carn_sex_scene_is_consensual_effect = yes
                            }
                            # for slaves and concubines, get scenes ranging from consensual to noncon
                            else_if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            is_concubine_of = scope:secondary_actor
                                            has_relation_slave_owner = scope:secondary_actor
                                        }
                                    }
                                }
                                # Consensual: I'm into you, and I either like you or you're super hot
                                if = {
                                    limit = {
                                        scope:secondary_actor = {
                                            OR = {
                                                opinion = {
                                                    target = scope:actor
                                                    value >= 50
                                                }
                                                scope:actor = { attraction >= 20 } # if you're hot enough they'll happily hatefuck you
                                            }
                                            is_attracted_to_gender_of = scope:actor
                                        }
                                    }
                                    carn_sex_scene_is_consensual_effect = yes
                                }
                                # dubcon: Either I'm into you but not that into you, or I don't swing that way but I like you enough to humor you
                                else_if = {
                                    limit = {
                                        scope:secondary_actor = {
                                            OR = {
                                                AND = {
                                                    is_attracted_to_gender_of = scope:actor
                                                    OR = {
                                                        opinion = {
                                                            target = scope:actor
                                                            value > 0
                                                        }
                                                        scope:actor = { attraction >= 10 } # if you're hot enough they'll be kinda ok with it
                                                    }
                                                }
                                                AND = {
                                                    NOT = { is_attracted_to_gender_of = scope:actor }
                                                    opinion = {
                                                        target = scope:actor
                                                        value >= 75
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    carn_sex_scene_is_dubcon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                                # Noncon: I either hate you or I don't swing this way, get me outta here
                                else = {
                                    carn_sex_scene_is_noncon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                            }
                            # get dubcon for characters that dislike you / are not attracted to you (but accept sex with you for some reason, like being a prostitute)
                            else_if = {
                                limit = {
                                    scope:secondary_actor = {
                                        OR = {
                                            opinion = {
                                                target = scope:actor
                                                value < 0
                                            }
                                            NOT = { is_attracted_to_gender_of = scope:actor }
                                        }
                                    }
                                }
                                carn_sex_scene_is_dubcon_effect = yes
                                carn_sex_scene_character_is_dom_player_effect = yes
                            }
                            # fallback to consensual scene
                            else = {
                                carn_sex_scene_is_consensual_effect = yes
                            }

                            random_list = {
                                60 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_inside_effect = yes
                                }
                                20 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_outside_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_anal_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_oral_effect = yes
                                }
                            }
                            carn_sex_scene_character_is_giving_player_effect = yes
                            # actually fire the sex scene
                            carn_sex_scene_effect_v2 = {
                                    PARTNER = scope:secondary_actor
                            }
                        }
                    }
                }
                hidden_effect = {
                    scope:actor = {
                        scope:secondary_actor = {
                            custom_tooltip = POD_dominate_interaction_have_crazy_sex_with_me_option_ct
                        }
                        # pay money for prostitution, and possibly lose piety if your faith dislikes this
                        #if = {
                        #    limit = {
                        #        scope:secondary_actor = {
                        #            carn_is_working_as_prostitute_trigger = yes
                        #        }
                        #        NOT = {
                        #            carn_relationship_allows_free_sex_trigger = {
                        #                PARTNER = scope:secondary_actor
                        #            }
                        #        }
                        #    }
                        #    pay_short_term_gold = {
                        #        target = scope:secondary_actor
                        #        gold = scope:secondary_actor.carn_prostitute_sex_interaction_price_value
                        #    }
                        #    if = {
                        #        limit = {
                        #            faith = { NOT = { has_doctrine = carn_doctrine_prostitution_accepted } }
                        #        }
                        #        add_piety = minor_piety_loss
                        #    }
                        #}

                        if = {
                            limit = {
                                NOT = { has_character_flag = carn_sex_interaction_effect_cd }
                            }

                            # show possible effects from sex scene
                            show_as_tooltip = {
                                carn_had_sex_with_effect_v2 = {
                                    PARTNER = scope:secondary_actor
                                }
                            }

                            ### STRESS ###
                            if = {
                                limit = {
                                    is_attracted_to_gender_of = scope:secondary_actor
                                }
                                stress_impact = {
                                    base = minor_stress_impact_loss
                                    chaste = activity_stress_gain_impact
                                }
                            }
                            else = {
                                custom_tooltip = carn_sex_interaction_not_attracted_to_warning_tt
                                stress_impact = {
                                    base = major_stress_impact_gain
                                }
                            }

                            add_character_flag = {
                                flag = carn_sex_interaction_effect_cd
                                months = carn_sex_interaction_cooldown_base
                            }
                        }
                        else = {
                            custom_tooltip = carn_sex_interaction_effect_cd_tt
                        }

                        # request the sex scene
                        hidden_effect = {

                            # lovers and soulmates always consensual
                            if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            has_relation_lover = scope:secondary_actor
                                            has_relation_soulmate = scope:secondary_actor
                                        }
                                    }
                                }
                                carn_sex_scene_is_consensual_effect = yes
                            }
                            # for slaves and concubines, get scenes ranging from consensual to noncon
                            else_if = {
                                limit = {
                                    scope:actor = {
                                        OR = {
                                            is_concubine_of = scope:secondary_actor
                                            has_relation_slave_owner = scope:secondary_actor
                                        }
                                    }
                                }
                                # Consensual: I'm into you, and I either like you or you're super hot
                                if = {
                                    limit = {
                                        scope:secondary_actor = {
                                            OR = {
                                                opinion = {
                                                    target = scope:actor
                                                    value >= 50
                                                }
                                                scope:actor = { attraction >= 20 } # if you're hot enough they'll happily hatefuck you
                                            }
                                            is_attracted_to_gender_of = scope:actor
                                        }
                                    }
                                    carn_sex_scene_is_consensual_effect = yes
                                }
                                # dubcon: Either I'm into you but not that into you, or I don't swing that way but I like you enough to humor you
                                else_if = {
                                    limit = {
                                        scope:secondary_actor = {
                                            OR = {
                                                AND = {
                                                    is_attracted_to_gender_of = scope:actor
                                                    OR = {
                                                        opinion = {
                                                            target = scope:actor
                                                            value > 0
                                                        }
                                                        scope:actor = { attraction >= 10 } # if you're hot enough they'll be kinda ok with it
                                                    }
                                                }
                                                AND = {
                                                    NOT = { is_attracted_to_gender_of = scope:actor }
                                                    opinion = {
                                                        target = scope:actor
                                                        value >= 75
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    carn_sex_scene_is_dubcon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                                # Noncon: I either hate you or I don't swing this way, get me outta here
                                else = {
                                    carn_sex_scene_is_noncon_effect = yes
                                    carn_sex_scene_character_is_dom_player_effect = yes
                                }
                            }
                            # get dubcon for characters that dislike you / are not attracted to you (but accept sex with you for some reason, like being a prostitute)
                            else_if = {
                                limit = {
                                    scope:secondary_actor = {
                                        OR = {
                                            opinion = {
                                                target = scope:actor
                                                value < 0
                                            }
                                            NOT = { is_attracted_to_gender_of = scope:actor }
                                        }
                                    }
                                }
                                carn_sex_scene_is_dubcon_effect = yes
                                carn_sex_scene_character_is_dom_player_effect = yes
                            }
                            # fallback to consensual scene
                            else = {
                                carn_sex_scene_is_consensual_effect = yes
                            }

                            random_list = {
                                60 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_inside_effect = yes
                                }
                                20 = {
                                    carn_sex_scene_is_vaginal_effect = yes
                                    carn_sex_scene_is_cum_outside_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_anal_effect = yes
                                }
                                10 = {
                                    carn_sex_scene_is_oral_effect = yes
                                }
                            }
                            carn_sex_scene_character_is_giving_player_effect = yes
                            # actually fire the sex scene
                            carn_sex_scene_effect_v2 = {
                                    PARTNER = scope:secondary_actor
                            }
                        }
                    }
                }
            }
        }


	}
	auto_accept = {
		always = yes
	}
}

POD_dominate_speak_through_the_blood_interaction = {
	desc = POD_dominate_speak_through_the_blood_interaction_desc
	category = interaction_category_vampire
	icon = POD_dominate_interaction
	
	cooldown = {
		years = 10
	}
	is_shown = {
		scope:actor = scope:recipient 
		scope:actor = { has_dominate_trigger = yes }
		scope:actor = {	
			has_perk = speak_through_the_blood_perk
		}
	}
	
	populate_recipient_list = {
		scope:actor = {
			every_in_list = {
				variable = secondary_target
				limit = { is_alive = yes }
				add_to_list = characters
			}
			add_to_list = characters
		}
	}
	
	send_option = {									
		flag = gold_option							
		localization = POD_dominate_self_interaction_gold_option																			
	}
	
	send_option = {									
		flag = embarass_option							
		localization = POD_dominate_self_interaction_embarass_option																			
	}
	
	send_option = {								
		flag = reveal_secret_option							
		localization = POD_dominate_self_interaction_reveal_secret_option																		
	}
	
	send_option = {									
		flag = recruit_option							
		localization = POD_dominate_self_interaction_recruit_option																			
	}
	
	send_option = {							
		flag = masq_option							
		localization = POD_dominate_self_interaction_masq_option																			
	}
	
	send_option = {								
		flag = suicide_option							
		localization = POD_dominate_self_interaction_suicide_option																			
	}
	
	
	send_option = {							
		flag = stop_scheme_option							
		localization = POD_dominate_self_interaction_stop_scheme_option																			
	}
	
	send_option = {							
		flag = stop_war_option							
		localization = POD_dominate_self_interaction_stop_war_option																			
	}
	
	send_option = {									
		flag = murder_option						
		localization = POD_dominate_self_interaction_murder_option																		
	}
	
	on_accept = {
		
		scope:actor = {
			POD_hunger_rouse_check_effect = yes
			clear_variable_list = bloodline
			every_child = {
				even_if_dead = yes
				add_children_to_list = { CHARACTER = scope:actor }
			}
			
			if = {
				limit = {
					scope:gold_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						limit = {
							is_landed = yes
							monthly_character_income > 0
						}
						pay_long_term_income = {
							target = scope:actor
							months = 3
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_gold_option_loc
			}
			
			else_if = {
				limit = {
					scope:embarass_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						add_prestige = -100
						random = {
							chance = 10
							increase_wounds_no_death_effect = { REASON = fight }
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_embarass_option_loc
			}
			
			else_if = {
				limit = {
					scope:reveal_secret_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						random_known_secret = {
							limit = { NOT = { is_known_by = scope:actor }}
							reveal_to = scope:actor
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_reveal_secret_option_loc
			}
			
			else_if = {
				limit = {
					scope:recruit_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						limit = {
							is_landed = no
						}
						save_scope_as = current
						scope:actor = {
							add_courtier = scope:current
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_recruit_option_loc
			}
			
			else_if = {
				limit = {
					scope:masq_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						limit = {
							is_vampire_trigger = yes
						}
						POD_masquerade_exposure_increase_effect = yes
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_masq_option_loc
			}
			
			else_if = {
				limit = {
					scope:suicide_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						increase_wounds_multiple_hostile_effect = { AMOUNT = 4 REASON = unwilling_suicide ATTACKER = scope:actor }
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_suicide_option_loc
			}
			
			else_if = {
				limit = {
					scope:stop_scheme_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						every_scheme = {
							limit = {
								scheme_target = scope:secondary_recipient
							}
							end_scheme = yes
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_stop_scheme_option_loc
			}
			
			else_if = {
				limit = {
					scope:murder_option = yes
				}
				scope:actor = { POD_commit_murder_effect = yes }
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						limit = {
							can_start_scheme = {
								target = scope:secondary_recipient
								type = murder 
							}	
						}
						start_scheme = {
							type = murder
							target = scope:secondary_recipient
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_murder_option_loc
			}
			
			else_if = {
				limit = {
					scope:stop_war_option = yes
				}
				hidden_effect = {
					every_in_list = {
						variable = bloodline
						save_scope_as = current
						every_character_war = {
							limit = {
								primary_attacker = scope:current
								primary_defender = scope:actor
							}
							end_war = white_peace
						}
					}
				}
				custom_tooltip = POD_dominate_speak_through_the_blood_interaction_stop_war_option_loc
			}
			
		}
	}
	
}