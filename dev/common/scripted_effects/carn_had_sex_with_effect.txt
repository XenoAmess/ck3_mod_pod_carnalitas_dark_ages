# better version of had_sex_with_effect
#
# scope:carn_sex_player: the character doing the laying with.
# scope:carn_sex_partner: the character getting laid.
# set the following effect on scope, effect is being called on for following 
# carn_sex_scene_no_pregnancy_effect = yes for no prenancy check, default is to check
# carn_sex_scene_no_stress_effect = yes for no stress check, default is to check
# carn_sex_scene_no_drama_effect = yes for no drama check, default is to check
# carn_sex_scene_no_memory_effect = yes for no memory check, default is to check
#
# sends scope:carn_sex_player and scope:carn_sex_partner to carn_on_sex on action event triggered by scope:carn_sex_player 
#
# sends scope:father and scope:mother to carn_on_pregnancy on action event triggered by scope:mother
# 

carn_had_sex_with_effect_v2 = {
	save_scope_as = carn_sex_player
	$PARTNER$ = {save_scope_as = carn_sex_partner}
	
	# Save additional scopes for backward compatibility
	save_scope_as = carn_sex_char_1
	save_scope_as = had_sex_root_character
	$PARTNER$ = {
		save_scope_as = carn_sex_char_2
		save_scope_as = had_sex_with_effect_partner
	}

	if = {
		limit = { this = scope:carn_sex_player }
		custom_tooltip = carn_had_sex_with_effect.first_person.tt
	}
	else_if = {
		limit = { this = scope:carn_sex_partner }
		custom_tooltip = carn_had_sex_with_effect.second_person.tt
	}
	else = {
		custom_tooltip = carn_had_sex_with_effect.third_person.tt
	}
	
	#Pregnancy
	if = {
		limit = {
			NOT = {carn_sex_scene_no_pregnancy_trigger = yes}
		}
		if = {
			limit = {
				scope:carn_sex_player = {carn_gender_can_impregnate_trigger = yes}
				scope:carn_sex_partner = {is_female = yes}
			}
			carn_check_pregnancy_effect = {
				FATHER = scope:carn_sex_player
				MOTHER = scope:carn_sex_partner
			}
		}
		if = {
			limit = {
				scope:carn_sex_player = {is_female = yes}
				scope:carn_sex_partner = {carn_gender_can_impregnate_trigger = yes}
			}
			carn_check_pregnancy_effect = {
				FATHER = scope:carn_sex_partner
				MOTHER = scope:carn_sex_player
			}
		}
	}
	
	#Stress
	if = {
		limit = {
			NOT = {carn_sex_scene_no_stress_trigger = yes}
		}
		if = {
			limit = { NOT = { has_character_flag = no_sex_stress_loss}}
			stress_impact = {
				lustful = minor_stress_impact_loss
				rakish = minor_stress_impact_loss
			}
			scope:carn_sex_partner = {
				hidden_effect = {
					stress_impact = {
						lustful = minor_stress_impact_loss
						rakish = minor_stress_impact_loss
					}
				}
			}
		}
	}
	
	#Drama
	hidden_effect = {
		if = {
			limit = {
				NOT = {carn_sex_scene_no_drama_trigger = yes}
			}
			if = {
				limit = {
					carn_gender_can_impregnate_trigger = yes
					NOT = { has_character_flag = had_story_cycle_peasant_affair }
					is_ruler = yes
					scope:carn_sex_partner = {
						is_lowborn = yes
						is_landed = no
						is_courtier = no
					}
					NOT = {
						any_scheme = {
							scheme_target = scope:carn_sex_partner
						}
					}
				}
				set_variable = {
					name = story_peasant_affair_target
					value = scope:carn_sex_partner
				}
				scope:carn_sex_partner = {
					if = {
						limit = {
							is_female = yes
							is_pregnant = no
							fertility >= 0.1
							is_visibly_fertile = yes
						}
						random = {
							#setting it to default game setting of 30
							chance = pregnancy_chance
							add_character_flag = {
								flag = peasant_is_pregnant
								days = 560
							}
						}
					}
				}
				create_story = story_peasant_affair
			}
			if = {
				limit = {
					is_female = yes
					NOT = { has_character_flag = had_story_cycle_peasant_affair }
					is_ruler = yes
					scope:carn_sex_partner = {
						is_lowborn = yes
						is_landed = no
						is_courtier = no
					}
					NOT = {
						any_scheme = {
							scheme_target = scope:carn_sex_partner
						}
					}
				}
				set_variable = {
					name = story_peasant_affair_target
					value = scope:carn_sex_partner
				}
				create_story = story_peasant_affair
			}
			
			#Adultery suspicion
			if = {
				limit = {
					OR = {
						is_married = yes
						is_concubine = yes
					}
					NOT = { any_consort = { this = scope:carn_sex_partner } }
				}
				set_variable = {
					name = had_recent_sex_with
					value = scope:carn_sex_partner
					days = 1000
				}
				random = {
					chance = 50 #This should be quite high as there is a chance that adultery.0001 "fails" i.e. spouse doesn't realize
					every_relation = {
						type = soulmate
						limit = {
							NOT = { this = scope:carn_sex_partner } #Soulmates should not grow suspicous of adulterous affairs after sleeping with their lover
						}
						add_to_temporary_list = partners_1
					}
					every_consort = {
						add_to_temporary_list = partners_1
					}
					random_in_list = {
						list = partners_1
						limit = { is_ai = no }
						alternative_limit = { always = yes }
						trigger_event = {
							id = adultery.0001
							days = { 14 365 }
						}
					}
				}
			}
			scope:carn_sex_partner = {
				if = {
					limit = {
						OR = {
							is_married = yes
							is_concubine = yes
						}
						NOT = { any_consort = { this = scope:carn_sex_player }}
					}
					set_variable = {
						name = had_recent_sex_with
						value = scope:carn_sex_player
						days = 1000
					}
					random = {
						chance = 50 #This should be quite high as there is a chance that adultery.0001 "fails" i.e. spouse doesn't realize
						every_relation = {
							type = soulmate
							limit = {
								NOT = { this = scope:carn_sex_player } #Soulmates should not grow suspicous of adulterous affairs after sleeping with their lover
							}
							add_to_temporary_list = partners_2
						}
						every_consort = {
							add_to_temporary_list = partners_2
						}
						random_in_list = {
							list = partners_2
							limit = { is_ai = no }
							alternative_limit = { always = yes }
							trigger_event = {
								id = adultery.0001
								days = { 14 365 }
							}
						}
					}
				}
			}			
		}
	}
	
	hidden_effect = {
		#Memory
		if = {
			limit = {
				NOT = {carn_sex_scene_no_memory_trigger = yes}
			}
			#Created a seprate file as it is too big
			carn_had_sex_memory_effect = yes
		}
		
		# hook into new on_action
		trigger_event = {
			on_action = carn_on_sex_v2
		}

		# Trigger carn_on_sex for both partners for backward compatibility
		trigger_event = {
			on_action = carn_on_sex
		}
		scope:carn_sex_partner = {
			# Change carn_sex_partner to be carn_sex_player for backward compatibility
			scope:carn_sex_player = { save_scope_as = carn_sex_partner }
			trigger_event = {
				on_action = carn_on_sex
			}
			# Restore carn_sex_partner
			save_scope_as = carn_sex_partner
		}

		#STD transmission
		risk_of_std_from_effect = { PARTNER = scope:carn_sex_partner }
		scope:carn_sex_partner = { risk_of_std_from_effect = { PARTNER = scope:carn_sex_player }}
		
		#Incestuous Relations
		give_incest_secret_or_nothing_with_target_effect = { CHARACTER = scope:carn_sex_partner }
		scope:carn_sex_partner = { give_incest_secret_or_nothing_with_target_effect = { CHARACTER = scope:carn_sex_player } }

		#Homosexuality
		give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = scope:carn_sex_partner }
		scope:carn_sex_partner = { give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = scope:carn_sex_player } }
	}
}

carn_check_pregnancy_effect = {
	$FATHER$ = {save_scope_as = father}
	$MOTHER$ = {save_scope_as = mother}
	
	hidden_effect = {
		# Save additional scope values for backward compatibility
		save_scope_value_as = { name = carn_sex_char_1_could_be_impregnated value = no }
		save_scope_value_as = { name = carn_sex_char_2_could_be_impregnated value = no }
		save_scope_value_as = { name = carn_sex_char_1_impregnated value = no }
		save_scope_value_as = { name = carn_sex_char_2_impregnated value = no }

		scope:mother = {	
			add_to_variable_list = {
				name = potential_father_variable_list
				target = scope:father
			}
			if = {
				limit = {
                    possible_pregnancy_after_sex_with_character_trigger = { CHARACTER = scope:father }
                    POD_race_pregnancy_compatibility_with_character_trigger = { CHARACTER = scope:father }
					is_pregnant = no
				}

				# Save additional scope values for backward compatibility
				if = {
					limit = {
						carn_sex_pregnancy_chance > 0
						OR = {
							carn_sex_scene_is_vaginal_trigger = yes
							scope:father = { carn_sex_scene_is_vaginal_trigger = yes}
						}
						NOT = { scope:father = { has_trait = eunuch } }
					}
					if = {
						limit = { this = scope:carn_sex_player }
						save_scope_value_as = { name = carn_sex_char_1_could_be_impregnated value = yes }
					}
					else = {
						save_scope_value_as = { name = carn_sex_char_2_could_be_impregnated value = yes }
					}
				}

				random = {
					chance = 0
					modifier = { add = carn_sex_pregnancy_chance }	
					modifier = {
						factor = 0.2  
						OR = {
							carn_sex_scene_is_vaginal_trigger = yes
							scope:father = {carn_sex_scene_is_vaginal_trigger = yes}
						}
						NOT = { carn_sex_scene_is_cum_inside_trigger = yes }
						scope:father = {NOT = { carn_sex_scene_is_cum_inside_trigger = yes }}
					}
					modifier = {
						factor = 0
						NOT = {carn_sex_scene_is_vaginal_trigger = yes}
						scope:father = {NOT = {carn_sex_scene_is_vaginal_trigger = yes}}
					}
					modifier = {
						factor = 0
						scope:father = {has_trait = eunuch}
					}				
					modifier = {
						factor = carn_birth_control_pregnancy_chance_multiplier
						OR = {
							scope:father = { has_character_modifier = carn_using_birth_control_modifier }
							has_character_modifier = carn_using_birth_control_modifier 
						}
					}

					# Save additional scope values for backward compatibility
					if = {
						limit = { this = scope:carn_sex_player }
						save_scope_value_as = { name = carn_sex_char_1_impregnated value = yes }
					}
					else = {
						save_scope_value_as = { name = carn_sex_char_2_impregnated value = yes }
					}

					make_pregnant = {
						father = scope:father
					}
					# hook into new on_action
					trigger_event = {
						on_action = carn_on_pregnancy
					}		
				}
			}
		}
	}
}


